import 'dart:async';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'models/card_status.dart';
import 'models/service_result.dart'; // Import ServiceResult
import 'models/pdf_signature_config.dart';
import 'models/xml_signature_config.dart';
import 'src/xml_signer.dart';

// Xu·∫•t c√°c model ƒë·ªÉ ng∆∞·ªùi d√πng plugin c√≥ th·ªÉ truy c·∫≠p d·ªÖ d√†ng
export 'models/service_result.dart';
export 'models/card_status.dart';
export 'models/pdf_signature_config.dart';
export 'models/xml_signature_config.dart';
export 'src/crypto_utils.dart';
export 'src/xml_signer.dart';
/// Enum ƒë·ªãnh nghƒ©a vai tr√≤ c·ªßa kh√≥a tr√™n th·∫ª.
enum KeyRole {
  /// Kh√≥a d√πng ƒë·ªÉ k√Ω (Signature)
  sig,
  /// Kh√≥a d√πng ƒë·ªÉ gi·∫£i m√£ (Decryption)
  dec,
  /// Kh√≥a d√πng ƒë·ªÉ x√°c th·ª±c (Authentication)
  aut,
  /// Kh√≥a d√πng cho Secure Messaging
  sm,
}
class Nfcsigner {
  static const MethodChannel _channel = MethodChannel('nfcsigner');

  /// Th·ª±c hi·ªán chu·ªói l·ªánh k√Ω s·ªë ho√†n ch·ªânh tr√™n th·∫ª th√¥ng minh.
  ///
  /// Bao g·ªìm c√°c b∆∞·ªõc: Ch·ªçn Applet, X√°c th·ª±c PIN, v√† K√Ω d·ªØ li·ªáu.
  /// Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng [ServiceResult] ch·ª©a ch·ªØ k√Ω ho·∫∑c th√¥ng tin l·ªói chi ti·∫øt.
  static Future<ServiceResult<Uint8List>> generateSignature({
    required String appletID,
    required String pin,
    required Uint8List dataToSign,
    int keyIndex = 0,
  }) async {
    try {
      final Map<String, dynamic> arguments = {
        'appletID': appletID,
        'pin': pin,
        'dataToSign': dataToSign,
        'keyIndex': keyIndex,
      };

      // G·ªçi ph∆∞∆°ng th·ª©c native
      final Uint8List? signature = await _channel.invokeMethod('generateSignature', arguments);

      // N·∫øu native tr·∫£ v·ªÅ d·ªØ li·ªáu (kh√¥ng c√≥ exception), ƒë√≥ l√† th√†nh c√¥ng
      return ServiceResult.success(signature);

    } on PlatformException catch (e) {
      // N·∫øu native n√©m ra m·ªôt exception, chuy·ªÉn ƒë·ªïi n√≥ th√†nh m·ªôt ServiceResult th·∫•t b·∫°i
      return ServiceResult.fromPlatformException(e);
    } catch (e) {
      // B·∫Øt c√°c l·ªói kh√¥ng mong mu·ªën kh√°c
      return ServiceResult.failure(
        status: CardStatus.unknownError,
        message: e.toString(),
      );
    }
  }
  /// Th·ª±c hi·ªán chu·ªói l·ªánh k√Ω s·ªë XML ho√†n ch·ªânh tr√™n th·∫ª th√¥ng minh.
  ///
  /// Bao g·ªìm c√°c b∆∞·ªõc: Ch·ªçn Applet, X√°c th·ª±c PIN, v√† K√Ω d·ªØ li·ªáu.
  /// Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng [ServiceResult] ch·ª©a ch·ªØ k√Ω ho·∫∑c th√¥ng tin l·ªói chi ti·∫øt.
  ///
  static Future<ServiceResult<Map<String, Uint8List>>> generateXMLSignature({
    required Uint8List dataToSign,
    required String appletID,
    required String pin,
    int keyIndex = 0,
  }) async {
    try {
      if (kDebugMode) {
        print('üîç [XML Single Session] B·∫Øt ƒë·∫ßu k√Ω XML trong m·ªôt session');
      }

      final Map<String, dynamic> arguments = {
        'appletID': appletID,
        'pin': pin,
        'dataToSign': dataToSign,
        'keyIndex': keyIndex,
      };

      final Uint8List? resultData = await _channel.invokeMethod('generateXMLSignature', arguments);

      if (resultData != null) {
        // Parse result
        final String jsonString = String.fromCharCodes(resultData);
        final Map<String, dynamic> resultMap = jsonDecode(jsonString);

        // Decode base64 string tr·ªü l·∫°i Uint8List
        final certificate = base64.decode(resultMap['certificate']);
        final signature = base64.decode(resultMap['signature']);

        if (kDebugMode) {
          print('‚úÖ [XML Single Session] K√Ω XML th√†nh c√¥ng');
          print('‚úÖ [XML Single Session] Certificate length: ${certificate.length}');
          print('‚úÖ [XML Single Session] Signature length: ${signature.length}');
        }

        return ServiceResult.success({
          'certificate': certificate,
          'signature': signature,
        });
      } else {
        return ServiceResult.failure(
          status: CardStatus.operationNotSupported,
          message: 'Kh√¥ng th·ªÉ k√Ω XML',
        );
      }

    } on PlatformException catch (e) {
      if (kDebugMode) {
        print('‚ùå [XML Single Session] PlatformException: ${e.message}');
      }
      return ServiceResult.fromPlatformException(e);
    } catch (e, stackTrace) {
      if (kDebugMode) {
        print('‚ùå [XML Single Session] L·ªói kh√¥ng mong mu·ªën: $e');
        print('‚ùå [XML Single Session] Stack trace: $stackTrace');
      }
      return ServiceResult.failure(
        status: CardStatus.unknownError,
        message: 'L·ªói k√Ω XML: $e',
      );
    }
  }

  /// L·∫•y kh√≥a c√¥ng khai RSA t·ª´ th·∫ª d·ª±a tr√™n vai tr√≤ c·ªßa kh√≥a.

  static Future<ServiceResult<Uint8List>> getRsaPublicKey({
    required String appletID,
    required KeyRole keyRole,
  }) async {
    try {
      // Chuy·ªÉn enum th√†nh chu·ªói m√† l·ªõp native mong ƒë·ª£i
      final String keyRoleString = keyRole.toString().split('.').last;

      final Map<String, dynamic> arguments = {
        'appletID': appletID,
        'keyRole': keyRoleString,
      };

      final Uint8List? publicKey = await _channel.invokeMethod('getRsaPublicKey', arguments);

      return ServiceResult.success(publicKey);

    } on PlatformException catch (e) {
      return ServiceResult.fromPlatformException(e);
    } catch (e) {
      return ServiceResult.failure(
        status: CardStatus.unknownError,
        message: e.toString(),
      );
    }
  }
  /// Theo chu·∫©n BMC Card, ƒë·ªëi t∆∞·ª£ng Certificate ƒë∆∞·ª£c l∆∞u v·ªõi tag `7F21`.
  static Future<ServiceResult<Uint8List>> getCertificate({
    required String appletID,
    required KeyRole keyRole,
  }) async {
    try {
      final String keyRoleString = keyRole.toString().split('.').last;

      final Map<String, dynamic> arguments = {
        'appletID': appletID,
        'keyRole': keyRoleString,
      };

      final Uint8List? certificate = await _channel.invokeMethod('getCertificate', arguments);

      return ServiceResult.success(certificate);

    } on PlatformException catch (e) {
      return ServiceResult.fromPlatformException(e);
    } catch (e) {
      return ServiceResult.failure(
        status: CardStatus.unknownError,
        message: e.toString(),
      );
    }
  }

  /// K√Ω tr·ª±c ti·∫øp l√™n m·ªôt file PDF b·∫±ng c√°ch s·ª≠ d·ª•ng logic native.
  ///
  /// [pdfBytes] l√† n·ªôi dung (d·∫°ng byte) c·ªßa file PDF g·ªëc.
  /// [pdfHashBytes] l√† DigestInfo SHA-256 c·ªßa PDF (t√πy ch·ªçn)
  /// Tr·∫£ v·ªÅ m·ªôt ServiceResult ch·ª©a n·ªôi dung (d·∫°ng byte) c·ªßa file PDF ƒë√£ ƒë∆∞·ª£c k√Ω.
  static Future<ServiceResult<Uint8List>> signPdf({
    required Uint8List pdfBytes,
    required String appletID,
    required String pin,
    int keyIndex = 0,
    String reason = "K√Ω duy·ªát!",
    String location = "Hanoi",
    PdfSignatureConfig? signatureConfig,
    Uint8List? pdfHashBytes,
    int signatureLength = 512, // Ho·∫∑c 256 t√πy v√†o kh√≥a
  }) async {
    try {
      final Map<String, dynamic> arguments = {
        'pdfBytes': pdfBytes,
        'appletID': appletID,
        'pin': pin,
        'keyIndex': keyIndex,
        'reason': reason,
        'location': location,
        'signatureConfig': signatureConfig?.toMap(),
        'pdfHashBytes': pdfHashBytes,
        'signatureLength': 512, // Ho·∫∑c 256 t√πy v√†o kh√≥a
      };

      final dynamic result = await _channel.invokeMethod('signPdf', arguments);

      // X·ª≠ l√Ω k·∫øt qu·∫£ t·ª´ Windows (tr·∫£ v·ªÅ Map) v√† Android/iOS (tr·∫£ v·ªÅ Uint8List)
      if (result is Uint8List) {
        // Android/iOS: tr·∫£ v·ªÅ PDF ƒë√£ k√Ω tr·ª±c ti·∫øp
        return ServiceResult.success(result);
      } else if (result is Map) {
        // Windows: tr·∫£ v·ªÅ raw data, c·∫ßn x·ª≠ l√Ω th√™m
        // Hi·ªán t·∫°i tr√™n Windows ch∆∞a h·ªó tr·ª£ k√Ω PDF tr·ª±c ti·∫øp
        // Tr·∫£ v·ªÅ PDF g·ªëc nh∆∞ m·ªôt fallback
        return ServiceResult.success(pdfBytes);
      } else {
        return ServiceResult.failure(
          status: CardStatus.unknownError,
          message: 'ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ kh√¥ng h·ª£p l·ªá t·ª´ n·ªÅn t·∫£ng',
        );
      }

    } on PlatformException catch (e) {
      return ServiceResult.fromPlatformException(e);
    } catch (e) {
      return ServiceResult.failure(
        status: CardStatus.unknownError,
        message: e.toString(),
      );
    }
  }
  /// K√Ω s·ªë m·ªôt t√†i li·ªáu XML theo chu·∫©n XML-DSig (ho√†n to√†n tr√™n Dart)
  ///
  /// [xmlContent] l√† n·ªôi dung XML c·∫ßn k√Ω
  /// [appletID] l√† ID c·ªßa applet tr√™n th·∫ª
  /// [pin] l√† m√£ PIN ƒë·ªÉ x√°c th·ª±c
  /// [keyIndex] l√† ch·ªâ s·ªë c·ªßa kh√≥a k√Ω (m·∫∑c ƒë·ªãnh 0)
  /// [signatureConfig] l√† c·∫•u h√¨nh cho ch·ªØ k√Ω XML
  /// Tr·∫£ v·ªÅ m·ªôt ServiceResult ch·ª©a n·ªôi dung XML ƒë√£ ƒë∆∞·ª£c k√Ω
  static Future<ServiceResult<String>> signXml({
    required String xmlContent,
    required String appletID,
    required String pin,
    int keyIndex = 0,
    XmlSignatureConfig? signatureConfig,
  }) async {
    try {

      // T·∫°o DigestInfo cho XML
      final digestInfo = XmlSigner.createDigestInfoForXml(
        xmlContent: xmlContent,
        config: signatureConfig ?? const XmlSignatureConfig(),
      );
      if (kDebugMode) {
        print("Digest: $digestInfo");
      }
      ServiceResult<Map<String, Uint8List>> resultData;
      // K√Ω DigestInfo b·∫±ng th·∫ª
      resultData = await generateXMLSignature(
        appletID: appletID,
        pin: pin,
        dataToSign: digestInfo,
        keyIndex: keyIndex,
      );

      if (!resultData.isSuccess) {
        return ServiceResult.failure(
          status: resultData.status,
          message: 'L·ªói k√Ω s·ªë: ${resultData.message}',
        );
      }

      // T·∫°o XML ƒë√£ k√Ω
      final signedXml = XmlSigner.signXml(
        xmlContent: xmlContent,
        signatureBytes: resultData.data!['certificate']!,
        certificateBytes: resultData.data!['signature']!,
        config: signatureConfig ?? const XmlSignatureConfig(),
      );

      return ServiceResult.success(signedXml);

    } catch (e) {
      return ServiceResult.failure(
        status: CardStatus.unknownError,
        message: 'L·ªói k√Ω XML: $e',
      );
    }
  }
}